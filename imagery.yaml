#AWSTemplateFormatVersion: '2010-09-09'
#Description: 'VPC Infrastructure for Containerized Web Application'
#
#Parameters:
#  EnvironmentName:
#    Description: Environment name that will be prefixed to resource names
#    Type: String
#    Default: 'imagery'
#
#  VpcCIDR:
#    Description: CIDR block for the VPC
#    Type: String
#    Default: '10.0.0.0/16'
#
#  PublicSubnet1CIDR:
#    Description: CIDR block for Public Subnet 1
#    Type: String
#    Default: '10.0.1.0/24'
#
#  PublicSubnet2CIDR:
#    Description: CIDR block for Public Subnet 2
#    Type: String
#    Default: '10.0.2.0/24'
#
#  PrivateSubnet1CIDR:
#    Description: CIDR block for Private Subnet 1
#    Type: String
#    Default: '10.0.3.0/24'
#
#  PrivateSubnet2CIDR:
#    Description: CIDR block for Private Subnet 2
#    Type: String
#    Default: '10.0.4.0/24'
#
#  # Add initial container image parameter
#  InitialContainerImage:
#    Description: Initial container image to use (should be a valid public image)
#    Type: String
#    Default: 'public.ecr.aws/r1b3l1w9/imagery:latest'
#
#  # Add deployment toggle parameter
#  DeployService:
#    Description: Whether to deploy the ECS service (set to false for initial infrastructure)
#    Type: String
#    Default: 'false'
#    AllowedValues:
#      - 'true'
#      - 'false'
#
#Conditions:
#  # Define conditions for optional resources
#  ShouldDeployService: !Equals [!Ref DeployService, 'true']
#
#Resources:
#  # VPC
#  VPC:
#    Type: AWS::EC2::VPC
#    Properties:
#      CidrBlock: !Ref VpcCIDR
#      EnableDnsSupport: true
#      EnableDnsHostnames: true
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-VPC'
#
#  # Internet Gateway
#  InternetGateway:
#    Type: AWS::EC2::InternetGateway
#    Properties:
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-IGW'
#
#  InternetGatewayAttachment:
#    Type: AWS::EC2::VPCGatewayAttachment
#    Properties:
#      InternetGatewayId: !Ref InternetGateway
#      VpcId: !Ref VPC
#
#  # Public Subnets
#  PublicSubnet1:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId: !Ref VPC
#      AvailabilityZone: !Select [0, !GetAZs '']
#      CidrBlock: !Ref PublicSubnet1CIDR
#      MapPublicIpOnLaunch: true
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-PublicSubnet1'
#
#  PublicSubnet2:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId: !Ref VPC
#      AvailabilityZone: !Select [1, !GetAZs '']
#      CidrBlock: !Ref PublicSubnet2CIDR
#      MapPublicIpOnLaunch: true
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-PublicSubnet2'
#
#  # Private Subnets
#  PrivateSubnet1:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId: !Ref VPC
#      AvailabilityZone: !Select [0, !GetAZs '']
#      CidrBlock: !Ref PrivateSubnet1CIDR
#      MapPublicIpOnLaunch: false
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-PrivateSubnet1'
#
#  PrivateSubnet2:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId: !Ref VPC
#      AvailabilityZone: !Select [1, !GetAZs '']
#      CidrBlock: !Ref PrivateSubnet2CIDR
#      MapPublicIpOnLaunch: false
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-PrivateSubnet2'
#
#  # NAT Gateways with Elastic IPs
#  NatGateway1EIP:
#    Type: AWS::EC2::EIP
#    DependsOn: InternetGatewayAttachment
#    Properties:
#      Domain: vpc
#
#  NatGateway2EIP:
#    Type: AWS::EC2::EIP
#    DependsOn: InternetGatewayAttachment
#    Properties:
#      Domain: vpc
#
#  NatGateway1:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt NatGateway1EIP.AllocationId
#      SubnetId: !Ref PublicSubnet1
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-NatGateway1'
#
#  NatGateway2:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt NatGateway2EIP.AllocationId
#      SubnetId: !Ref PublicSubnet2
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-NatGateway2'
#
#  # Route Tables
#  PublicRouteTable:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId: !Ref VPC
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-PublicRouteTable'
#
#  PublicRoute:
#    Type: AWS::EC2::Route
#    DependsOn: InternetGatewayAttachment
#    Properties:
#      RouteTableId: !Ref PublicRouteTable
#      DestinationCidrBlock: '0.0.0.0/0'
#      GatewayId: !Ref InternetGateway
#
#  PublicSubnet1RouteTableAssociation:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      RouteTableId: !Ref PublicRouteTable
#      SubnetId: !Ref PublicSubnet1
#
#  PublicSubnet2RouteTableAssociation:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      RouteTableId: !Ref PublicRouteTable
#      SubnetId: !Ref PublicSubnet2
#
#  PrivateRouteTable1:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId: !Ref VPC
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-PrivateRouteTable1'
#
#  PrivateRoute1:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable1
#      DestinationCidrBlock: '0.0.0.0/0'
#      NatGatewayId: !Ref NatGateway1
#
#  PrivateSubnet1RouteTableAssociation:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable1
#      SubnetId: !Ref PrivateSubnet1
#
#  PrivateRouteTable2:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId: !Ref VPC
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-PrivateRouteTable2'
#
#  PrivateRoute2:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable2
#      DestinationCidrBlock: '0.0.0.0/0'
#      NatGatewayId: !Ref NatGateway2
#
#  PrivateSubnet2RouteTableAssociation:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable2
#      SubnetId: !Ref PrivateSubnet2
#
#  # Security Groups
#  ALBSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Security group for the ALB
#      VpcId: !Ref VPC
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: 80
#          ToPort: 80
#          CidrIp: 0.0.0.0/0
#        - IpProtocol: tcp
#          FromPort: 443
#          ToPort: 443
#          CidrIp: 0.0.0.0/0
#        - IpProtocol: tcp
#          FromPort: 5000
#          ToPort: 5000
#          CidrIp: 0.0.0.0/0
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-ALB-SG'
#
#  ECSSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Security group for the ECS containers
#      VpcId: !Ref VPC
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: 5000
#          ToPort: 5000
#          SourceSecurityGroupId: !Ref ALBSecurityGroup
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-ECS-SG'
#
#  # Application Load Balancer
#  ApplicationLoadBalancer:
#    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#    Properties:
#      Name: !Sub '${EnvironmentName}-ALB'
#      Subnets:
#        - !Ref PublicSubnet1
#        - !Ref PublicSubnet2
#      SecurityGroups:
#        - !Ref ALBSecurityGroup
#      Scheme: internet-facing
#      Type: application
#      LoadBalancerAttributes:
#        - Key: idle_timeout.timeout_seconds
#          Value: '60'
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-ALB'
#
#  ALBTargetGroup:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
#      Name: !Sub '${EnvironmentName}-TargetGroup'
#      Port: 5000
#      Protocol: HTTP
#      VpcId: !Ref VPC
#      TargetType: ip
#      HealthCheckEnabled: true
#      HealthCheckIntervalSeconds: 30
#      HealthCheckPath: /
#      HealthCheckProtocol: HTTP
#      HealthCheckPort: '5000'
#      HealthCheckTimeoutSeconds: 5
#      HealthyThresholdCount: 2
#      UnhealthyThresholdCount: 2
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-TargetGroup'
#
#  ALBListener:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    Properties:
#      DefaultActions:
#        - Type: forward
#          TargetGroupArn: !Ref ALBTargetGroup
#      LoadBalancerArn: !Ref ApplicationLoadBalancer
#      Port: 80
#      Protocol: HTTP
#
#  # ECS Cluster
#  ECSCluster:
#    Type: AWS::ECS::Cluster
#    Properties:
#      ClusterName: !Sub '${EnvironmentName}-Cluster'
#      CapacityProviders:
#        - FARGATE
#        - FARGATE_SPOT
#      DefaultCapacityProviderStrategy:
#        - CapacityProvider: FARGATE
#          Weight: 1
#
#  # S3 Bucket
#  ImagesBucket:
#    Type: AWS::S3::Bucket
#    Properties:
#      BucketName: imagery-app
#      PublicAccessBlockConfiguration:
#        BlockPublicAcls: true
#        BlockPublicPolicy: true
#        IgnorePublicAcls: true
#        RestrictPublicBuckets: true
#      CorsConfiguration:
#        CorsRules:
#          - AllowedHeaders:
#              - '*'
#            AllowedMethods:
#              - GET
#              - PUT
#              - POST
#              - DELETE
#              - HEAD
#            AllowedOrigins:
#              - '*'
#            MaxAge: 3000
#
#  # S3 Bucket Policy
#  ImagesBucketPolicy:
#    Type: AWS::S3::BucketPolicy
#    Properties:
#      Bucket: !Ref ImagesBucket
#      PolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: ecs-tasks.amazonaws.com
#            Action:
#              - s3:GetObject
#              - s3:PutObject
#              - s3:ListBucket
#              - s3:DeleteObject
#            Resource:
#              - !Sub 'arn:aws:s3:::${ImagesBucket}'
#              - !Sub 'arn:aws:s3:::${ImagesBucket}/*'
#
#  # ECR Repository - Public
#  ECRRepository:
#    Type: AWS::ECR::PublicRepository
#    Properties:
#      RepositoryName: !Sub '${EnvironmentName}-repository'
#      RepositoryPolicyText:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal: '*'
#            Action:
#              - 'ecr-public:BatchGetImage'
#              - 'ecr-public:GetDownloadUrlForLayer'
#            Condition:
#              StringEquals:
#                'aws:PrincipalOrgID': '*'
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-ECR-Public'
#
#  # ECS Task Execution Role
#  ECSTaskExecutionRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: ecs-tasks.amazonaws.com
#            Action: 'sts:AssumeRole'
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
#      Policies:
#        - PolicyName: S3Access
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - 's3:GetObject'
#                  - 's3:PutObject'
#                  - 's3:ListBucket'
#                  - 's3:DeleteObject'
#                Resource:
#                  - !Sub 'arn:aws:s3:::${ImagesBucket}'
#                  - !Sub 'arn:aws:s3:::${ImagesBucket}/*'
#      Tags:
#        - Key: Name
#          Value: !Sub '${EnvironmentName}-TaskExecutionRole'
#
#  # CloudWatch Logs
#  CloudWatchLogsGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Sub '/ecs/${EnvironmentName}'
#      RetentionInDays: 30
#
#  # Task Definition - using initial image parameter
#  WebAppTaskDefinition:
#    Type: AWS::ECS::TaskDefinition
#    Properties:
#      Family: !Sub '${EnvironmentName}-task'
#      Cpu: '256'
#      Memory: '512'
#      NetworkMode: awsvpc
#      RequiresCompatibilities:
#        - FARGATE
#      ExecutionRoleArn: !Ref ECSTaskExecutionRole
#      TaskRoleArn: !Ref ECSTaskExecutionRole
#      ContainerDefinitions:
#        - Name: !Sub '${EnvironmentName}-container'
#          Image: !Ref InitialContainerImage
#          Essential: true
#          PortMappings:
#            - ContainerPort: 5000
#              HostPort: 5000
#              Protocol: tcp
#          LogConfiguration:
#            LogDriver: awslogs
#            Options:
#              awslogs-group: !Ref CloudWatchLogsGroup
#              awslogs-region: !Ref AWS::Region
#              awslogs-stream-prefix: ecs
#          Environment:
#            - Name: S3_BUCKET_NAME
#              Value: !Ref ImagesBucket
#            - Name: AWS_REGION
#              Value: !Ref AWS::Region
#          HealthCheck:
#            Command:
#              - CMD-SHELL
#              - curl -f http://localhost:5000/ || exit 1
#            Interval: 30
#            Timeout: 5
#            Retries: 3


AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Tag-Finder-VPC
  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: PublicSubnet1
  # Public subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: PublicSubnet2
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  # ECS Cluster
  TagFinderCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: TagFinderCluster
  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: TaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken,
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  # CodeDeploy role for blue-green deployments
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
  # Create log group
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: tag-finder-log-group
  # ECS Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: tag-finder-task
      RequiresCompatibilities:
        - FARGATE
      Cpu: '2048'
      Memory: '4096'
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt S3AccessRole.Arn
      ContainerDefinitions:
        - Name: tag-finder-container
          Essential: true
          Image: public.ecr.aws/r1b3l1w9/imagery:latest
          PortMappings:
            - ContainerPort: 5000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: tag-finder-log-group
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP and HTTPS traffic to the Load Balancer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound traffic from Load Balancer to ECS service"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  # Application Load Balancer
  TagFinderLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: tag-finder-load-balancer
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Type: application
  # Production target group (initially blue environment)
  BlueTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: tag-finder-blue-target
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 60
      HealthCheckIntervalSeconds: 70
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "300"
  # Green target group for new deployments
  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: tag-finder-green-target
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 60
      HealthCheckIntervalSeconds: 70
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "300"
  # Test listener for validation testing before switching traffic
  TestListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GreenTargetGroup
      LoadBalancerArn: !Ref TagFinderLoadBalancer
      Port: 5000
      Protocol: HTTP
  # Production listener (initially points to blue environment)
  ProductionListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BlueTargetGroup
      LoadBalancerArn: !Ref TagFinderLoadBalancer
      Port: 80
      Protocol: HTTP
  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: tag-finder-service
      Cluster: !Ref TagFinderCluster
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSServiceSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref BlueTargetGroup
          ContainerName: tag-finder-container
          ContainerPort: 5000
      PropagateTags: SERVICE
      EnableECSManagedTags: true
      DeploymentController:
        Type: CODE_DEPLOY
    DependsOn:
      - ProductionListener
      - TestListener
  # IAM Role for Auto Scaling
  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ECSAutoScalingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - application-autoscaling:RegisterScalableTarget
                  - application-autoscaling:DescribeScalableTargets
                  - application-autoscaling:PutScalingPolicy
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DeleteAlarms
                  - application-autoscaling:*
                Resource: "*"
  # Auto Scaling Target
  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: !Join
        - '/'
        - - service
          - !Ref TagFinderCluster
          - !GetAtt ECSService.Name
      RoleARN: !GetAtt ECSAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  # Auto Scaling Policy
  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
  # CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: tag-finder-application
      ComputePlatform: ECS
  # CodeDeploy Deployment Group
  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentGroupName: tag-finder-deployment-group
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
          # Removed the WaitTimeInMinutes parameter as it's causing the error
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
      ECSServices:
        - ClusterName: !Ref TagFinderCluster
          ServiceName: !GetAtt ECSService.Name
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - ProdTrafficRoute:
              ListenerArns:
                - !Ref ProductionListener
            TestTrafficRoute:
              ListenerArns:
                - !Ref TestListener
            TargetGroups:
              - Name: !GetAtt BlueTargetGroup.TargetGroupName
              - Name: !GetAtt GreenTargetGroup.TargetGroupName
Outputs:
  TagFinderLoadBalancerDNS:
    Description: The DNS name of the load balancer
    Value: !GetAtt TagFinderLoadBalancer.DNSName
  TagFinderLoadBalancerURL:
    Description: URL of the load balancer
    Value: !Join ['', ['http://', !GetAtt TagFinderLoadBalancer.DNSName]]
  CodeDeployAppName:
    Description: CodeDeploy Application Name for ECS Blue-Green Deployments
    Value: !Ref CodeDeployApplication
  CodeDeployGroupName:
    Description: CodeDeploy Deployment Group Name
    Value: !Ref DeploymentGroup
  